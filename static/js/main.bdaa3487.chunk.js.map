{"version":3,"sources":["components/UI/Modal/Modal.module.scss","components/EventItem/EventItem.module.scss","components/Calendar/CalendarBody/CalendarBody.module.scss","components/Calendar/CalendarHeader/CalendarHeader.module.scss","components/Header/Header.module.scss","components/Calendar/Calendar.module.scss","components/UI/Button/Button.module.scss","components/Footer/Footer.module.scss","components/Header/Header.js","components/UI/Button/Button.js","components/EventItem/EventItem.js","components/UI/Modal/Modal.js","components/Calendar/CalendarBody/CalendarBody.js","components/Calendar/CalendarHeader/CalendarHeader.js","components/Calendar/Calendar.js","components/Footer/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Header","className","classes","header","Button","props","type","btn","aria-label","ariaLabel","onClick","children","EventItem","event","useState","isEditing","setEditing","eventItem","setEventItem","text","eventText","setEventText","isValid","setIsValid","id","defaultValue","onChange","e","target","value","date","autoFocus","trim","length","eventIdItem","onEdit","eventId","parentElement","onDelete","Modal","selectedDate","filteredEvents","events","filter","closeModalHandler","onDataToCalendar","isExpand","setIsExpand","expandFormHandler","contractFormHandler","eventInput","useRef","submitHandler","preventDefault","enteredEvent","current","eventData","uuidv4","onEventDataToCalendar","deleteHandler","editHandler","Backdrop","backdrop","ModalOverlay","modal","modal_content","onSubmit","htmlFor","ref","map","reactDom","createPortal","document","getElementById","CalendarBody","daysInMonth","weekdays","emptyDays","day","month","year","daysArray","setDaysArray","useEffect","daysInMonthArray","totalDays","arrayIndex","dayNumber","currentDay","dayString","filterDate","push","console","log","openModalHandler","selectDate","outerText","calendar_body","index","isBigDevice","slice","number","CalendarHeader","backMonthHandler","nextMonthHandler","dateInHeader","setDateInHeader","toLocaleString","calendar_header","calendar_buttons","Calendar","setIsBigDevice","dateNav","setDateNav","isOpen","setIsOpen","changeDevicesHandler","bigDevice","matches","window","matchMedia","addEventListener","removeEventListener","Date","setMonth","getMonth","getDate","getFullYear","initialWeekday","toLocaleDateString","weekday","indexOf","split","setSelectedDate","setEvents","close","prevEvents","updatedEvents","calendar","open","Footer","footer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bdaa3487.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"Modal_App__MUck5\",\"modal_content\":\"Modal_modal_content__10z8X\",\"backdrop\":\"Modal_backdrop__2a-iO\",\"modal\":\"Modal_modal__2mMi3\",\"btn-close\":\"Modal_btn-close__3dS5N\",\"btn-add\":\"Modal_btn-add__8OdJB\",\"btn-cancel\":\"Modal_btn-cancel__1-YYB\",\"valid\":\"Modal_valid__2uSZx\",\"invalid\":\"Modal_invalid__2nn8l\",\"red-text\":\"Modal_red-text__346b6\",\"buttons\":\"Modal_buttons__1lHHu\",\"events\":\"Modal_events__2ArNr\",\"events-title\":\"Modal_events-title__7DN58\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"EventItem_App__uNr6Z\",\"event-item-padding\":\"EventItem_event-item-padding__2Ka0h\",\"valid\":\"EventItem_valid__3GicS\",\"invalid\":\"EventItem_invalid__21hT7\",\"event-item\":\"EventItem_event-item__1VFb-\",\"event-input\":\"EventItem_event-input__4qPk4\",\"btn-delete\":\"EventItem_btn-delete__1qpQq\",\"btn-save\":\"EventItem_btn-save__32X2e\",\"red-text\":\"EventItem_red-text__3XHOD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"CalendarBody_App__OhMpV\",\"calendar_body\":\"CalendarBody_calendar_body__2w3i8\",\"week-days\":\"CalendarBody_week-days__6U5Tn\",\"month-days\":\"CalendarBody_month-days__1Mvow\",\"number-day\":\"CalendarBody_number-day__3b1th\",\"no-empty-days\":\"CalendarBody_no-empty-days__27MeW\",\"current-day\":\"CalendarBody_current-day__2NL3_\",\"there-are-events\":\"CalendarBody_there-are-events__3xFth\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"CalendarHeader_App__1unbA\",\"calendar_header\":\"CalendarHeader_calendar_header__37Id2\",\"calendar_buttons\":\"CalendarHeader_calendar_buttons__1ZeL0\",\"btn-left\":\"CalendarHeader_btn-left__rg-b8\",\"btn-right\":\"CalendarHeader_btn-right__3m3AP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1v0yI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"calendar\":\"Calendar_calendar__B0R-q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__6u7Tq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__7dIj9\"};","import React from 'react';\n\nimport classes from './Header.module.scss';\n\nconst Header = () => {\n  return (\n    <header className={classes.header}>\n      <h1>Calendar</h1>\n    </header>\n  );\n};\n\nexport default Header;","import React from \"react\";\n\nimport classes from \"./Button.module.scss\";\n\nconst Button = (props) => {\n  return (\n    <button\n      type={props.type}\n      className={`${classes.btn} ${props.className}`}\n      aria-label={props.ariaLabel}\n      onClick={props.onClick}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { Fragment, useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport classes from \"./EventItem.module.scss\";\nimport Button from \"../UI/Button/Button\";\n\nconst EventItem = (props) => {\n  const { event } = props;\n\n  const [isEditing, setEditing] = useState(false);\n\n  const deleteHandler = (event) => {\n    let eventId = event.target.parentElement.id;\n\n    // Sends the value to the parent component \"Modal\"\n    props.onDelete(eventId);\n  };\n\n  // When an event is clicked, the edit mode opens\n  const startEditHandle = () => {\n    setEditing(true);\n  };\n\n  const [eventItem, setEventItem] = useState(event);\n  const [eventText, setEventText] = useState(event.text);\n  const editEventHandler = (e) => {\n    setEventText(e.target.value);\n\n    // The changes contained in the edited event\n    setEventItem(() => ({\n      id: event.id,\n      text: eventText,\n      date: event.date,\n    }));\n  };\n\n  const [isValid, setIsValid] = useState(true);\n  // When the check mark button is clicked, the edit mode is closed\n  const endEditHandler = () => {\n    // If the input edit is empty, the edit mode is not closed\n    if (eventText.trim().length === 0) {\n      setEditing(true);\n      setIsValid(false);\n      return;\n    }\n\n    setEditing(false);\n\n    let eventIdItem = event.id;\n\n    // Sends the values to the parent component \"Modal\"\n    props.onEdit(eventItem, eventIdItem);\n  };\n\n  return (\n    <Fragment>\n      <li\n        id={event.id}\n        className={`${classes[\"event-item\"]} ${\n          !isEditing ? classes[\"event-item-padding\"] : \"\"\n        } ${!isValid ? classes[\"invalid\"] : classes[\"valid\"]}`}\n      >\n        {!isEditing ? (\n          <Fragment>\n            <span onClick={startEditHandle}>{eventText}</span>\n            <Button\n              type=\"button\"\n              className={classes[\"btn-delete\"]}\n              onClick={deleteHandler}\n            />\n          </Fragment>\n        ) : (\n          <Fragment>\n            <input\n              type=\"text\"\n              className={classes[\"event-input\"]}\n              defaultValue={eventText}\n              onChange={editEventHandler}\n              autoFocus\n            />\n            <Button\n              type=\"button\"\n              className={classes[\"btn-save\"]}\n              onClick={endEditHandler}\n            />\n          </Fragment>\n        )}\n      </li>\n      {!isValid && (\n        <span className={classes[\"red-text\"]}>You need to enter text</span>\n      )}\n    </Fragment>\n  );\n};\n\nexport default EventItem;\n\nEventItem.propTypes = {\n  isEditing: PropTypes.bool,\n  eventId: PropTypes.number,\n  eventIdItem: PropTypes.number,\n  eventItem: PropTypes.object,\n  eventText: PropTypes.string,\n  isValid: PropTypes.bool,\n};\n","import React, { Fragment, useRef, useState } from \"react\";\nimport reactDom from \"react-dom\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport PropTypes from \"prop-types\";\n\nimport classes from \"./Modal.module.scss\";\nimport Button from \"../Button/Button\";\nimport EventItem from \"../../EventItem/EventItem\";\n\nconst Modal = (props) => {\n  const { selectedDate, events } = props;\n\n  // Filter all events that contain the selected date\n  const filteredEvents = events.filter((event) => event.date === selectedDate);\n\n  // Hide the modal when the \"Close\" button is clicked\n  const closeModalHandler = () => {\n    let close = false;\n\n    // Sends the value to the parent component \"Calendar\"\n    props.onDataToCalendar(close);\n  };\n\n  const [isExpand, setIsExpand] = useState(false);\n\n  // Clicking the \"Add Event\" button expands the form\n  const expandFormHandler = () => {\n    setIsExpand(true);\n  };\n\n  // Clicking the \"Cancel\" button collapses the form\n  const contractFormHandler = () => {\n    setIsExpand(false);\n  };\n\n  const eventInput = useRef();\n  const [isValid, setIsValid] = useState(true);\n\n  // Add a new event\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    const enteredEvent = eventInput.current.value;\n\n    // If the input is empty, the \"Add Event\" button will not work and a new event will not be added\n    if (enteredEvent.trim().length === 0) {\n      setIsValid(false);\n      return;\n    }\n\n    const eventData = {\n      id: uuidv4(),\n      text: enteredEvent,\n      date: selectedDate,\n    };\n\n    setIsValid(true);\n\n    // Sends the value to the parent component \"Calendar\"\n    props.onEventDataToCalendar(eventData);\n  };\n\n  const deleteHandler = (eventId) => {\n    // Sends the value to the parent component \"Calendar\"\n    props.onDelete(eventId);\n  };\n\n  const editHandler = (eventItem, eventIdItem) => {\n    // Sends the values to the parent component \"Calendar\"\n    props.onEdit(eventItem, eventIdItem);\n  };\n\n  // Show the backdrop\n  const Backdrop = () => {\n    return <div className={classes.backdrop} onClick={closeModalHandler}></div>;\n  };\n\n  // Show the modal over the backdrop\n  const ModalOverlay = () => {\n    return (\n      <div className={classes.modal}>\n        <div className={classes.modal_content}>\n          <Button\n            type=\"button\"\n            className={classes[\"btn-close\"]}\n            onClick={closeModalHandler}\n          />\n          {isExpand ? (\n            <form onSubmit={submitHandler}>\n              <label htmlFor=\"event\">Event</label>\n              <input\n                id=\"event\"\n                type=\"text\"\n                ref={eventInput}\n                className={!isValid ? classes[\"invalid\"] : classes[\"valid\"]}\n                autoFocus\n              />\n              {!isValid && (\n                <span className={classes[\"red-text\"]}>\n                  You need to enter text\n                </span>\n              )}\n              <div className={classes[\"buttons\"]}>\n                <Button type=\"submit\" className={classes[\"btn-add\"]}>\n                  Add Event\n                </Button>\n                <Button\n                  type=\"button\"\n                  className={classes[\"btn-cancel\"]}\n                  onClick={contractFormHandler}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          ) : (\n            <Button\n              type=\"button\"\n              className={classes[\"btn-add\"]}\n              onClick={expandFormHandler}\n            >\n              Add Event\n            </Button>\n          )}\n          <div className={classes[\"events\"]}>\n            {filteredEvents.length > 0 ? (\n              <Fragment>\n                <div className={classes[\"events-title\"]}>Events for today:</div>\n                <ul className={classes[\"event-list\"]}>\n                  {filteredEvents.map((event) => (\n                    <EventItem\n                      key={event.id}\n                      event={event}\n                      onDelete={deleteHandler}\n                      onEdit={editHandler}\n                    />\n                  ))}\n                </ul>\n              </Fragment>\n            ) : (\n              <p>You don't have any events today</p>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <Fragment>\n      {reactDom.createPortal(\n        <Backdrop />,\n        document.getElementById(\"backdrop-root\")\n      )}\n      {reactDom.createPortal(\n        <ModalOverlay />,\n        document.getElementById(\"overlay-root\")\n      )}\n    </Fragment>\n  );\n};\n\nexport default Modal;\n\nModal.propTypes = {\n  filteredEvents: PropTypes.object,\n  close: PropTypes.bool,\n  isExpand: PropTypes.bool,\n  isValid: PropTypes.bool,\n  enteredEvent: PropTypes.string,\n  eventData: PropTypes.object,\n};\n","import React, { useEffect, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport PropTypes from \"prop-types\";\n\nimport classes from \"./CalendarBody.module.scss\";\n\nconst CalendarBody = (props) => {\n  const {\n    daysInMonth,\n    weekdays,\n    emptyDays,\n    day,\n    month,\n    year,\n    events,\n    selectedDate,\n  } = props;\n\n  const [daysArray, setDaysArray] = useState([]);\n\n  useEffect(() => {\n    let daysInMonthArray = [];\n\n    let totalDays = emptyDays + daysInMonth;\n\n    for (let arrayIndex = 1; arrayIndex <= totalDays; arrayIndex++) {\n      // If the index of the array is greater than the number of empty days, the number of the day is displayed; otherwise nothing is displayed\n      let dayNumber = arrayIndex - emptyDays;\n      let currentDay = dayNumber === day;\n\n      let dayString = `${month + 1}/${arrayIndex - emptyDays}/${year}`;\n\n      let filterDate = events.filter((event) => event.date === dayString);\n\n      if (arrayIndex > emptyDays) {\n        daysInMonthArray.push({\n          id: uuidv4(),\n          day: dayNumber,\n          currentDay: currentDay,\n          events: filterDate.length > 0,\n        });\n      } else {\n        daysInMonthArray.push({\n          id: uuidv4(),\n          day: \"\",\n          currentDay: null,\n          events: null,\n        });\n      }\n\n      console.log(daysInMonthArray);\n    }\n\n    setDaysArray(daysInMonthArray);\n  }, [day, daysInMonth, emptyDays, events, month, selectedDate, year]);\n\n  // When any day is clicked, a modal opens\n  const openModalHandler = (event) => {\n    let open = true;\n\n    let selectDate = `${month + 1}/${event.target.outerText}/${year}`;\n\n    // Sends the value to the parent component \"Calendar\"\n    props.onDataToCalendar(open, selectDate);\n  };\n\n  return (\n    <div className={classes.calendar_body}>\n      <ul className={classes[\"week-days\"]}>\n        {weekdays.map((day, index) => (\n          <li key={index}>{props.isBigDevice ? day : day.slice(0, 2)}</li>\n        ))}\n      </ul>\n      <div className={classes[\"month-days\"]}>\n        {daysArray.map((number) => (\n          <div\n            key={number.id}\n            className={`${classes[\"number-day\"]} ${\n              number.currentDay !== null ? classes[\"no-empty-days\"] : \"\"\n            } ${number.currentDay ? classes[\"current-day\"] : \"\"} ${\n              number.events ? classes[\"there-are-events\"] : \"\"\n            }`}\n            onClick={number.currentDay !== null ? openModalHandler : null}\n          >\n            {number.day}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default CalendarBody;\n\nCalendarBody.propTypes = {\n  daysArray: PropTypes.object,\n  daysInMonthArray: PropTypes.object,\n  totalDays: PropTypes.number,\n  dayNumber: PropTypes.number,\n  currentDay: PropTypes.bool,\n  dayString: PropTypes.string,\n  filterDate: PropTypes.object,\n  open: PropTypes.bool,\n  selectDate: PropTypes.string,\n};\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from 'prop-types';\n\nimport classes from \"./CalendarHeader.module.scss\";\nimport Button from \"../../UI/Button/Button\";\n\nconst CalendarHeader = (props) => {\n  const { backMonthHandler, nextMonthHandler, date } = props;\n\n  const [dateInHeader, setDateInHeader] = useState(\"\");\n\n  useEffect(() => {\n    // Get the month and year shown in the calendar header\n    setDateInHeader(\n      date.toLocaleString(\"en-us\", {\n        month: \"long\",\n        year: \"numeric\",\n      })\n    );\n  }, [date]);\n\n  return (\n    <div className={classes.calendar_header}>\n      <h2>{dateInHeader}</h2>\n      <div className={classes.calendar_buttons}>\n        <Button\n          type=\"button\"\n          className={classes[\"btn-left\"]}\n          ariaLabel=\"Back\"\n          onClick={backMonthHandler}\n        />\n        <Button\n          type=\"button\"\n          className={classes[\"btn-right\"]}\n          ariaLabel=\"Next\"\n          onClick={nextMonthHandler}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default CalendarHeader;\n\nCalendarHeader.propTypes = {\n  dateInHeader: PropTypes.string\n}\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport classes from \"./Calendar.module.scss\";\nimport Modal from \"../UI/Modal/Modal\";\nimport CalendarBody from \"./CalendarBody/CalendarBody\";\nimport CalendarHeader from \"./CalendarHeader/CalendarHeader\";\n\nconst weekdays = [\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n  \"Sunday\",\n];\n\nconst Calendar = () => {\n  // Handle media queries\n  const [isBigDevice, setIsBigDevice] = useState();\n  const [dateNav, setDateNav] = useState(0);\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Switch between screen sizes\n  const changeDevicesHandler = (bigDevice) => {\n    setIsBigDevice(bigDevice.matches);\n  };\n\n  useEffect(() => {\n    const bigDevice = window.matchMedia(\"(min-width: 992px)\");\n    bigDevice.addEventListener(\"change\", changeDevicesHandler);\n    changeDevicesHandler(bigDevice);\n\n    return () => {\n      bigDevice.removeEventListener(\"change\", changeDevicesHandler);\n    };\n  }, []);\n\n  // Create an instance of a date object\n  let date = new Date();\n\n  if (dateNav !== 0) {\n    date.setMonth(date.getMonth() + dateNav);\n  }\n\n  let day = date.getDate();\n  let month = date.getMonth();\n  let year = date.getFullYear();\n\n  // Get the last day of the month\n  let daysInMonth = new Date(year, month + 1, 0).getDate();\n\n  // Get the first day of the month\n  let firstDayOfMonth = new Date(year, month, 1);\n\n  // The day of the week of the first day of the month\n  const initialWeekday = firstDayOfMonth.toLocaleDateString(\"en-us\", {\n    weekday: \"long\",\n  });\n\n  // The number of empty days before the first day of the month\n  const emptyDays = weekdays.indexOf(initialWeekday.split(\", \")[0]);\n\n  // Decreases the value of the navigation date by one\n  // when clicking on the left arrow\n  const backMonthHandler = () => {\n    setDateNav(dateNav - 1);\n  };\n\n  // Increase the value of the navigation date by one\n  // when clicking the right arrow\n  const nextMonthHandler = () => {\n    setDateNav(dateNav + 1);\n  };\n\n  const [selectedDate, setSelectedDate] = useState(\"\");\n  // Open Modal\n  const openModalHandler = (open, selectDate) => {\n    setIsOpen(open);\n    setSelectedDate(selectDate);\n  };\n\n  // Close Modal\n  const closeModalHandler = (close) => {\n    setIsOpen(close);\n  };\n\n  // It includes each new event in the event array\n  const [events, setEvents] = useState([]);\n  const eventDataHandler = (eventData) => {\n    setEvents((prevEvents) => {\n      return [eventData, ...prevEvents];\n    });\n  };\n\n  // It deletes the event that matches the selected id\n  const deleteEventHandler = (eventId) => {\n    setEvents((prevEvents) => {\n      let updatedEvents = prevEvents.filter((event) => event.id !== eventId);\n      return updatedEvents;\n    });\n  };\n\n  // It updates edited events\n  const updateEventHandler = (eventItem, eventIdItem) => {\n    setEvents((prevEvents) => {\n      let updatedEvents = prevEvents.filter(\n        (event) => event.id !== eventIdItem\n      );\n      return [eventItem, ...updatedEvents];\n    });\n  };\n\n  return (\n    <Fragment>\n      {isOpen && (\n        <Modal\n          events={events}\n          selectedDate={selectedDate}\n          onDataToCalendar={closeModalHandler}\n          onEventDataToCalendar={eventDataHandler}\n          onDelete={deleteEventHandler}\n          onEdit={updateEventHandler}\n        />\n      )}\n      <div className={classes.calendar}>\n        <CalendarHeader\n          date={date}\n          backMonthHandler={backMonthHandler}\n          nextMonthHandler={nextMonthHandler}\n        />\n        <CalendarBody\n          day={day}\n          month={month}\n          year={year}\n          events={events}\n          selectedDate={selectedDate}\n          weekdays={weekdays}\n          isBigDevice={isBigDevice}\n          daysInMonth={daysInMonth}\n          emptyDays={emptyDays}\n          onDataToCalendar={openModalHandler}\n        />\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Calendar;\n\nCalendar.propTypes = {\n  isBigDevice: PropTypes.bool,\n  dateNav: PropTypes.number,\n  isOpen: PropTypes.bool,\n  date: PropTypes.object,\n  day: PropTypes.number,\n  month: PropTypes.number,\n  year: PropTypes.number,\n  daysInMonth: PropTypes.number,\n  firstDayOfMonth: PropTypes.object,\n  initialWeekday: PropTypes.string,\n  emptyDays: PropTypes.number,\n  selectedDatea: PropTypes.string,\n  events: PropTypes.object,\n};\n","import React from 'react';\n\nimport classes from './Footer.module.scss';\n\nconst Footer = () => {\n  return (\n    <footer className={classes.footer}>\n      <span>© Copyright 2021. <strong>\"TBM85\"</strong></span>\n      <span> All rights reserved</span> \n    </footer>\n  );\n};\n\nexport default Footer;","import './App.scss';\nimport Header from './components/Header/Header';\nimport Calendar from './components/Calendar/Calendar';\nimport Footer from './components/Footer/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Calendar />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}